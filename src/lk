#!/bin/env lua
-- LuaK: C/C++-Style Lua
local pl = require("pl")
local lexer = require("pl.lexer")
local file = require("pl.file")
local path = require("pl.path")

local args = {...}

local lk = { ["_VERSION"] = "1.0.0-DEV" }

lk.optsTable = { ["lib"] = nil, ["verbose"] = nil, ["validate"] = nil, ["interpret"] = nil }

function lk.checkFileExists(filePath)
	if path.exists(filePath) and path.isfile(filePath) then
		return true
	else
		return false
	end
end

function lk.checkDirectoryExists(dirPath)
	if path.exists(dirPath) and path.isdir(dirPath) then
		return true
	else
		return false
	end
end

-- In case I use exit() instead of os.exit() (used to Python's exit() :p)
function exit(i)
	 os.exit(i) 
end

-- Table to newline-terminated string
function lk.tableToNLTString(tbl)
	str = ""
	for i,v in ipairs(tbl) do
		if i == #tbl then
			str = str .. v
		else 
			str = str .. v .. "\n"
		end
	end
	return str
end

function lk.parseOpts(args) 
	tabstr = lk.tableToNLTString(args)
	tok = lexer.scan(tabstr,nil,{space=false})
	local t,v = tok()
	while t ~= nil do
		if v == 'l' then
			lk.optsTable.lib = true
		elseif v == 'v' then
			lk.optsTable.verbose = true
		elseif v == 'i' then 
			lk.optsTable.interpret = true
		elseif v == 'V' then
			lk.optsTable.validate = true
		elseif v == '-' then
			-- Do nothing
		elseif t == 'space' then
			-- Do nothing
		elseif t == 'iden' then
			-- Probably a file name; do nothing
		else
			print("[ERROR] Unrecognized option: '-" .. v .. "'")
			exit()
		end
		t,v = tok()
	end
end

function lk.checkOpts()
	if lk.optsTable["lib"] and lk.optsTable["validate"] then
		print("[ERROR] Options '-l' and '-V' are not compatible.")
		exit(-1)
	elseif lk.optsTable["lib"] and lk.optsTable["interpret"] then
		print("[ERROR] Options '-l' and '-i' are not compatible.")
		exit(-1)
	elseif lk.optsTable["interpret"] and lk.optsTable["validate"] then
		print("[ERROR] Options '-i' and '-V' are not compatible.")
		exit(-1)
	else
		if lk.optsTable["verbose"] then
			print("[INFO] All options compatible.")
		end
	end
end

if #args < 1 then
	print("Usage: lk [OPTIONS] <file> <output>       ")
	print("       -l : Compile as library.           ")
	print("       -v : Verbose.                      ")
	print("       -i : Don't compile, just interpret.")
	print("       -V : Just validate the file.       ")	
else
	lk.parseOpts(args)			
	if lk.optsTable["verbose"] then
		print("[INFO] KLang Version " .. lk["_VERSION"] .. ".")
	end
	lk.checkOpts()
	if lk.optsTable["verbose"] then
		print("[INFO] KLang Options: ")
		if lk.optsTable["lib"] then
			print("       Library:      On ")
		else
			print("       Library:      Off")
		end
		if lk.optsTable["verbose"] then
			print("       Verbose:      On ")
		else
			print("       Verbose:      Off")
		end
		if lk.optsTable["validate"] then
			print("       Validate:     On ")
		else
			print("       Validate:     Off")
		end
		if lk.optsTable["interpret"] then
			print("       Interpret:    On ")
		else
			print("       Interpret:    Off")
		end
		if args[#args-1] == nil then
			print("[ERROR] No input file argument found.")
			exit(-1)
		elseif args[#args] == nil then
			print("[ERROR] No output file argument found.")
			exit(-1)
		end
		
		print("[INFO] File Input: " .. args[#args-1])
		print("[INFO] File Output: " .. args[#args])
	end
	local inputPath = args[#args-1]
	local outputPath = args[#args]
	if not lk.checkFileExists(inputPath) then
		print("[ERROR] Input file '" .. inputPath .. "' doesn\'t exist.") 
		exit(-1)
	end
	if lk.checkFileExists(outputPath) then
		print("[WARNING] Output file '" .. outputPath .. "' will be overwritten.")
	end
	if lk.optsTable["verbose"] then
		print("[INFO] Input file: '" .. inputPath .. "'.")
		print("[INFO] Output file: '" .. outputPath .. "'.") 
	end
	exit(0)
end


