-- lk.mini exec w/o shebang ('#!/bin/env lua')
local a=require("pl")local b=require("pl.lexer")local c=require("pl.file")local d=require("pl.path")local e={...}local f={["_VERSION"]="1.0.0-DEV"}f.optsTable={["lib"]=nil,["verbose"]=nil,["validate"]=nil,["interpret"]=nil}function table.val_to_str(g)if"string"==type(g)then g=string.gsub(g,"\n","\\n")if string.match(string.gsub(g,"[^'\"]",""),'^"+$')then return"'"..g.."'"end;return'"'..string.gsub(g,'"','\\"')..'"'else return"table"==type(g)and table.tostring(g)or tostring(g)end end;function table.key_to_str(h)if"string"==type(h)and string.match(h,"^[_%a][_%a%d]*$")then return h else return"["..table.val_to_str(h).."]"end end;function table.tostring(i)local j,k={},{}for h,g in ipairs(i)do table.insert(j,table.val_to_str(g))k[h]=true end;for h,g in pairs(i)do if not k[h]then table.insert(j,table.key_to_str(h).."="..table.val_to_str(g))end end;return"{"..table.concat(j,",").."}"end;function string.split(m,n)local o,p;o={}p=0;if#n==1 then return{n}end;while true do l=string.find(n,m,p,true)if l~=nil then table.insert(o,string.sub(n,p,l-1))p=l+1 else table.insert(o,string.sub(n,p))break end end;return o end;function f.checkFileExists(q)if d.exists(q)and d.isfile(q)then return true else return false end end;function f.checkDirectoryExists(r)if d.exists(r)and d.isdir(r)then return true else return false end end;function exit(s)os.exit(s)end;function f.tableToNLTString(i)str=""for s,g in ipairs(i)do if s==#i then str=str..g else str=str..g.."\n"end end;return str end;function f.parseOpts(e)tabstr=f.tableToNLTString(e)tok=b.scan(tabstr,nil,{space=false})local o,g=tok()while o~=nil do if g=='l'then f.optsTable.lib=true elseif g=='v'then f.optsTable.verbose=true elseif g=='i'then f.optsTable.interpret=true elseif g=='V'then f.optsTable.validate=true elseif g=='-'then elseif o=='space'then elseif o=='iden'then elseif o=='string'then elseif o=='/'then elseif o=='\\'then elseif o=='.'then else print("[ERROR] Unrecognized option: '-"..g.."'")exit()end;o,g=tok()end end;function f.checkOpts()if f.optsTable["lib"]and f.optsTable["validate"]then print("[ERROR] Options '-l' and '-V' are not compatible.")exit(-1)elseif f.optsTable["lib"]and f.optsTable["interpret"]then print("[ERROR] Options '-l' and '-i' are not compatible.")exit(-1)elseif f.optsTable["interpret"]and f.optsTable["validate"]then print("[ERROR] Options '-i' and '-V' are not compatible.")exit(-1)else if f.optsTable["verbose"]then print("[INFO] All options compatible.")end end end;function f.lex(t)local u=string.split("\n",t)local v={}for s,l in ipairs(u)do local w={}for o,g in b.scan(l,nil,{space=false})do table.insert(w,{["type"]=o,["value"]=g})end;table.insert(v,w)end end;if#e<2 then print("Usage: lk [OPTIONS] <file> <output>       ")print("       -l : Compile as library.           ")print("       -v : Verbose.                      ")print("       -i : Don't compile, just interpret.")print("       -V : Just validate the file.       ")else f.parseOpts(e)if f.optsTable["verbose"]then print("[INFO] KLang Version "..f["_VERSION"]..".")end;f.checkOpts()if f.optsTable["verbose"]then print("[INFO] KLang Options: ")if f.optsTable["lib"]then print("       Library:      On ")else print("       Library:      Off")end;if f.optsTable["verbose"]then print("       Verbose:      On ")else print("       Verbose:      Off")end;if f.optsTable["validate"]then print("       Validate:     On ")else print("       Validate:     Off")end;if f.optsTable["interpret"]then print("       Interpret:    On ")else print("       Interpret:    Off")end;if e[#e-1]==nil then print("[ERROR] No input file argument found.")exit(-1)elseif e[#e]==nil then print("[ERROR] No output file argument found.")exit(-1)end end;local x=e[#e-1]local y=e[#e]if not f.checkFileExists(x)then print("[ERROR] Input file '"..x.."' doesn\'t exist.")exit(-1)end;if f.checkFileExists(y)then print("[WARNING] Output file '"..y.."' will be overwritten.")end;if f.optsTable["verbose"]then print("[INFO] Input file: '"..x.."'.")print("[INFO] Output file: '"..y.."'.")end;local t=c.read(x)if t==nil then print("[ERROR] Unknown error opening input file. (Do you have the correct permissions?). ")exit(-1)end;f.lex(t)exit(0)end
